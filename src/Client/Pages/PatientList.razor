@page "/patients"
@inject IFhirService FhirService
@inject NavigationManager Navigation

<PageTitle>Patient List</PageTitle>

<div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2><i class="bi bi-people-fill me-2"></i>Patients</h2>
        <button class="btn btn-primary" @onclick="CreatePatient">
            <i class="bi bi-plus-circle me-1"></i>New Patient
        </button>
    </div>

    <div class="card mb-4">
        <div class="card-body">
            <div class="input-group">
                <span class="input-group-text"><i class="bi bi-search"></i></span>
                <input type="text" class="form-control" placeholder="Search by name or phone..."
                       @bind="searchTerm" @bind:event="oninput" @onkeyup="HandleSearch" />
                @if (!string.IsNullOrEmpty(searchTerm))
                {
                    <button class="btn btn-outline-secondary" @onclick="ClearSearch">
                        <i class="bi bi-x-circle"></i>
                    </button>
                }
            </div>
        </div>
    </div>

    @if (isLoading)
    {
        <div class="text-center py-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else if (!patients.Any())
    {
        <div class="alert alert-info">
            <i class="bi bi-info-circle me-2"></i>No patients found.
        </div>
    }
    else
    {
        <div class="row">
            @foreach (var patient in patients)
            {
                <div class="col-md-6 col-lg-4 mb-3">
                    <div class="card patient-card h-100">
                        <div class="card-body">
                            <h5 class="card-title">
                                <i class="@GetGenderIcon(patient.Gender) me-2"></i>
                                @patient.FullName
                            </h5>
                            <p class="card-text">
                                <small class="text-muted">
                                    <i class="bi bi-calendar3 me-1"></i>
                                    @patient.BirthDate?.ToString("MMM dd, yyyy")
                                </small><br/>
                                <small class="text-muted">
                                    <i class="bi bi-telephone me-1"></i>
                                    @patient.PhoneNumber
                                </small>
                            </p>
                            <div class="d-flex gap-2">
                                <button class="btn btn-sm btn-outline-primary" @onclick="() => EditPatient(patient.Id)">
                                    <i class="bi bi-pencil"></i> Edit
                                </button>
                                <button class="btn btn-sm btn-outline-danger" @onclick="() => DeletePatient(patient.Id)">
                                    <i class="bi bi-trash"></i> Delete
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
</div>

@code {
    private List<PatientViewModel> patients = new();
    private bool isLoading = true;
    private string searchTerm = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadPatients();
    }

    private async Task LoadPatients()
    {
        isLoading = true;
        patients = await FhirService.GetAllPatientsAsync();
        isLoading = false;
    }

    private async Task HandleSearch()
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            await LoadPatients();
        }
        else
        {
            isLoading = true;
            patients = await FhirService.SearchPatientsAsync(searchTerm);
            isLoading = false;
        }
    }

    private async Task ClearSearch()
    {
        searchTerm = string.Empty;
        await LoadPatients();
    }

    private void CreatePatient()
    {
        Navigation.NavigateTo("/patients/new");
    }

    private void EditPatient(string? id)
    {
        Navigation.NavigateTo($"/patients/edit/{id}");
    }

    private async Task DeletePatient(string? id)
    {
        if (id != null && await FhirService.DeletePatientAsync(id))
        {
            await LoadPatients();
        }
    }

    private string GetGenderIcon(string gender)
    {
        return gender.ToLower() switch
        {
            "male" => "fas fa-mars text-primary",
            "female" => "fas fa-venus text-danger",
            _ => "fas fa-genderless text-secondary"
        };
    }
}
